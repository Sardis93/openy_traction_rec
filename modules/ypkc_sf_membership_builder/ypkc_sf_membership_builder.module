<?php

/**
 * @file
 * Contains ypkc_sf_membership_builder.module.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\ypkc_sf_membership_builder\MembershipImporter;

/**
 * Implements hook_help().
 */
function ypkc_sf_membership_builder_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ypkc_sf_membership_builder module.
    case 'help.page.ypkc_sf_membership_builder':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides TractionRec integration for the Membership Builder') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ypkc_sf_membership_builder_taxonomy_term_presave(TermInterface $entity) {
  if ($entity->bundle() !== MembershipImporter::TAXONOMY_VID) {
    return;
  }

  /** @var Drupal\ypkc_sf_membership_builder\MembershipImporterInterface $tr_importer */
  $tr_importer = \Drupal::service('ypkc_salesforce.membership_importer');

  // Calculate hash used to track changes for TractionRec import.
  $entity->set('field_hash', $tr_importer->calcTermHash($entity));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ypkc_sf_membership_builder_form_taxonomy_term_membership_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // These fields are not used in this vocabulary.
  // Hide them to not confuse content editors.
  $form['relations']['#access'] = FALSE;
  $form['rabbit_hole']['#access'] = FALSE;
  $form['simple_sitemap']['#access'] = FALSE;

  $form['name']['widget'][0]['value']['#description'] = t('TractionRec Membership type. For internal usage only (this field isn\'t displayed in the Membership Builder)');

  // We shouldn't allow editing of some fields manually,
  // because they will be overridden after next Traction Rec import.
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity && !$entity->isNew()) {
      $form['name']['#disabled'] = 'disabled';
      $form['field_traction_rec_id']['#disabled'] = 'disabled';
      $form['field_branch']['#disabled'] = 'disabled';
      $form['field_price_description']['#disabled'] = 'disabled';
    }
  }
}
